/*
 * scorecard
 *
 * inital pass at scorecard API
 *
 * API version: 1.0
 * Contact: mitchell.harvey@arup.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"

	"github.com/gin-gonic/gin"
	Config "github.com/mharv/scorecard-backend/db"
)

// DeleteCommentsCommentId -
func DeleteCommentsCommentId(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// DeleteMaterialTypesMaterialTypeId -
func DeleteMaterialTypesMaterialTypeId(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// DeleteStoresStoreId -
func DeleteStoresStoreId(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// DeleteUsersUserId -
func DeleteUsersUserId(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// GetCommentsMaterialInstanceId - Your GET endpoint
func GetCommentsMaterialInstanceId(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// GetEpicMaterials - Your GET endpoint
func GetEpicMaterials(c *gin.Context) {
	var epicMaterials []EpicMaterial

	if result := Config.DB.Find(&epicMaterials); result.Error != nil {
		c.AbortWithStatus(http.StatusNotFound)
	} else {
		c.JSON(http.StatusOK, epicMaterials)
	}
}

// GetEpicMaterialsEpicMaterialId - Your GET endpoint
func GetEpicMaterialsEpicMaterialId(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// GetMaterialInstanceHistoryMaterialInstanceId - Your GET endpoint
func GetMaterialInstanceHistoryMaterialInstanceId(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// GetMaterialInstancesStoreId - Your GET endpoint
func GetMaterialInstancesStoreId(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// GetMaterialTypes - Your GET endpoint
func GetMaterialTypes(c *gin.Context) {
	var materialTypes []MaterialType

	if result := Config.DB.Find(&materialTypes); result.Error != nil {
		c.AbortWithStatus(http.StatusNotFound)
	} else {
		c.JSON(http.StatusOK, materialTypes)
	}
}

// GetMaterialTypesMaterialTypeId - Your GET endpoint
func GetMaterialTypesMaterialTypeId(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// GetStores - Your GET endpoint
func GetStores(c *gin.Context) {
	var stores []Store

	if result := Config.DB.Find(&stores); result.Error != nil {
		c.AbortWithStatus(http.StatusNotFound)
	} else {
		c.JSON(http.StatusOK, stores)
	}
}

// GetStoresStoreId - Your GET endpoint
func GetStoresStoreId(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// GetUsers - Your GET endpoint
func GetUsers(c *gin.Context) {
	var users []User

	if result := Config.DB.Find(&users); result.Error != nil {
		c.AbortWithStatus(http.StatusNotFound)
	} else {
		c.JSON(http.StatusOK, users)
	}
}

// GetUsersUserId - Get User Info by User ID
func GetUsersUserId(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// PostComment -
func PostComment(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// PostMaterialInstance -
func PostMaterialInstance(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// PostMaterialType -
func PostMaterialType(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// PostStore -
func PostStore(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// PostUser - Create New User
func PostUser(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// PutMaterialInstancesMaterialInstanceId -
func PutMaterialInstancesMaterialInstanceId(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// PutMaterialTypesMaterialTypeId -
func PutMaterialTypesMaterialTypeId(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// PutStoresStoreId -
func PutStoresStoreId(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// PutUsersUserId -
func PutUsersUserId(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}
